package ut.edu.teammatching.auth.security;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Component
public class JwtUtil {

    private static final String SECRET_KEY = "your-secret-key-your-secret-key-your-secret-key"; // √çt nh·∫•t 32 k√Ω t·ª±
    private static final long EXPIRATION_TIME = 86400000; // 1 ng√†y

    private final Key key = Keys.hmacShaKeyFor(SECRET_KEY.getBytes());

    // ‚úÖ T·∫°o JWT Token
    public String generateToken(String username) {
        return Jwts.builder()
                .subject(username)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key)
                .compact();
    }

    // ‚úÖ L·∫•y t·∫•t c·∫£ claims t·ª´ token
    private Claims getAllClaimsFromToken(String token) {
        return Jwts.parser()  // D√πng parser() cho phi√™n b·∫£n c≈©
                .setSigningKey(key)  // ƒê·∫∑t kh√≥a k√Ω (HMAC key)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // ‚úÖ Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
    public boolean isTokenExpired(String token) {
        return getAllClaimsFromToken(token).getExpiration().before(new Date());
    }

    // ‚úÖ X√°c th·ª±c token v√† l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    public Authentication getAuthentication(String token) {
        Claims claims = getAllClaimsFromToken(token);
        String username = claims.getSubject();
        List<SimpleGrantedAuthority> authorities = Arrays.asList(new SimpleGrantedAuthority("USER")); // C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh role n·∫øu c·∫ßn

        return new UsernamePasswordAuthenticationToken(username, null, authorities);
    }

    // ‚úÖ Ki·ªÉm tra token h·ª£p l·ªá v√† ch∆∞a h·∫øt h·∫°n
    public boolean validateToken(String token) {
        try {
            boolean expired = isTokenExpired(token);
            System.out.println("üîç Token expired: " + expired);
            return !expired;
        } catch (Exception e) {
            System.err.println("‚ùå Token validation error: " + e.getMessage());
            return false;
        }
    }

    // ‚úÖ L·∫•y username t·ª´ token
    public String getUsernameFromToken(String token) {
        return getAllClaimsFromToken(token).getSubject();
    }

}
