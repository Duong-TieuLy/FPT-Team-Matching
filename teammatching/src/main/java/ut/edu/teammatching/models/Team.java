package ut.edu.teammatching.models;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import jakarta.persistence.*;
import lombok.*;
import ut.edu.teammatching.enums.JoinRequestStatus;
import ut.edu.teammatching.enums.TeamType;

import java.util.*;

@Getter
@Setter
@Entity
@Table(name="teams")
public class Team {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "team_id", nullable = false)
    private Long id;

    @Column(name = "team_name", nullable = false)
    private String teamName;

    @Enumerated(EnumType.STRING)
    @Column(name = "team_type", nullable = false)
    private TeamType teamType;

    @Column(name = "team_picture")
    private String teamPicture; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·∫°i di·ªán

    @Lob
    private String  description;

    //L∆∞u ng∆∞·ªùi t·∫°o team
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "created_by_id")
    @JsonBackReference
    private User createdBy;

    @ManyToMany
    @JoinTable(
            name = "student_team",
            joinColumns = @JoinColumn(name = "team_id"),
            inverseJoinColumns = @JoinColumn(name = "student_id")
    )
    @JsonBackReference
    private List<Student> students = new ArrayList<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "lecturer_id")
    @JsonIgnoreProperties({"supervisedTeams", "givenRatings", "receivedRatings", "sentMessages"})
    private Lecturer lecturer;

    @OneToMany(mappedBy = "team", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnore
    private List<Task> tasks = new ArrayList<>();

    // Team Leader - Ng∆∞·ªùi t·∫°o nh√≥m
    @ManyToOne(fetch = FetchType.LAZY)
    @JsonIgnore
    @JoinColumn(name = "leader_id")
    private Student leader;

    @ElementCollection
    @CollectionTable(name = "team_roles", joinColumns = @JoinColumn(name = "team_id"))
    @MapKeyColumn(name = "user_id") // L∆∞u ID c·ªßa User
    @Column(name = "role")
    private Map<Long, String> roles = new HashMap<>();

    @ElementCollection
    @CollectionTable(name = "join_requests", joinColumns = @JoinColumn(name = "team_id"))
    @MapKeyJoinColumn(name = "student_id")
    @Column(name = "status")
    private Map<Student, JoinRequestStatus> joinRequests = new HashMap<>();

    // ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt leader duy nh·∫•t
    public void setLeader(Student newLeader) {
        if (newLeader == null || !students.contains(newLeader)) {
            throw new IllegalStateException("Leader ph·∫£i l√† m·ªôt th√†nh vi√™n c·ªßa team!");
        }
        this.leader = newLeader;
    }

    /** üî• Ki·ªÉm tra r√†ng bu·ªôc: N·∫øu team l√† Academic th√¨ ph·∫£i c√≥ gi·∫£ng vi√™n */
    @PrePersist
    private void prePersist() {
        // N·∫øu kh√¥ng c√≥ leader ‚Üí ki·ªÉm tra xem creator c√≥ ph·∫£i l√† gi·∫£ng vi√™n kh√¥ng
        if (this.leader == null && !(this.createdBy instanceof Lecturer)) {
            throw new IllegalStateException("Team ph·∫£i c√≥ leader ho·∫∑c ƒë∆∞·ª£c t·∫°o b·ªüi gi·∫£ng vi√™n!");
        }

        // Ki·ªÉm tra n·∫øu leader kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa team
        if (this.leader != null && !students.contains(this.leader)) {
            throw new IllegalStateException("Leader ph·∫£i l√† th√†nh vi√™n c·ªßa team!");
        }
    }

    @PreUpdate
    private void preUpdate() {
        if (this.teamType == TeamType.ACADEMIC && this.lecturer == null) {
            throw new IllegalStateException("Academic Team ph·∫£i c√≥ gi·∫£ng vi√™n!");
        }

        // Ki·ªÉm tra n·∫øu leader kh√¥ng ph·∫£i l√† th√†nh vi√™n c·ªßa team
        if (this.leader == null || !students.contains(this.leader)) {
            throw new IllegalStateException("M·ªói team ph·∫£i c√≥ m·ªôt leader v√† leader ph·∫£i l√† th√†nh vi√™n trong team!");
        }
    }

    public void addMember(User user) {
        if (user == null) {
            throw new IllegalArgumentException("User kh√¥ng ƒë∆∞·ª£c null!");
        }

        // Ki·ªÉm tra n·∫øu l√† Student
        if (user instanceof Student student) {
            // Ki·ªÉm tra xem student ƒë√£ l√† th√†nh vi√™n trong team ch∆∞a
            if (!students.contains(student)) {
                students.add(student);
            }

            // Ch·ªâ g√°n leader n·∫øu team l√† Academic ho·∫∑c Non-Academic, v√† leader ƒëang null
            if (this.leader == null && !students.isEmpty()) {
                this.leader = students.get(0); // G√°n leader l√† sinh vi√™n ƒë·∫ßu ti√™n trong team
            }

            // Ki·ªÉm tra l·∫°i n·∫øu leader kh√¥ng ph·∫£i l√† th√†nh vi√™n, throw l·ªói
            if (this.leader != null && !students.contains(this.leader)) {
                throw new IllegalStateException("Leader ph·∫£i l√† th√†nh vi√™n c·ªßa team!");
            }

        }
        else if (user instanceof Lecturer lecturer) {
            if (this.teamType == TeamType.ACADEMIC) {
                if (this.lecturer != null) {
                    throw new IllegalStateException("Team ƒë√£ c√≥ gi·∫£ng vi√™n r·ªìi!");
                }
                this.lecturer = lecturer;  // G√°n gi·∫£ng vi√™n v√†o team
            } else {
                throw new IllegalStateException("Ch·ªâ team Academic m·ªõi c√≥ gi·∫£ng vi√™n!");
            }
        } else {
            throw new IllegalArgumentException("Ch·ªâ c√≥ th·ªÉ th√™m Student ho·∫∑c Lecturer!");
        }
    }

}